{"name": "test_form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#uploadPicture')).send keys\n\nReason: InvalidArgumentException: Message: invalid argument: File not found : D:\\PycharmProjects\\-qa_guru_4_11/photo_test.jpg\n  (Session info: chrome=112.0.5615.86)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00A2DCE3+50899]\n\t(No symbol) [0x009BE111]\n\t(No symbol) [0x008C5588]\n\t(No symbol) [0x008EB7FF]\n\t(No symbol) [0x0090B8FC]\n\t(No symbol) [0x008E8EC6]\n\t(No symbol) [0x0090BC54]\n\t(No symbol) [0x0091E01C]\n\t(No symbol) [0x0090B6F6]\n\t(No symbol) [0x008E7708]\n\t(No symbol) [0x008E886D]\n\tGetHandleVerifier [0x00C93EAE+2566302]\n\tGetHandleVerifier [0x00CC92B1+2784417]\n\tGetHandleVerifier [0x00CC327C+2759788]\n\tGetHandleVerifier [0x00AC5740+672048]\n\t(No symbol) [0x009C8872]\n\t(No symbol) [0x009C41C8]\n\t(No symbol) [0x009C42AB]\n\t(No symbol) [0x009B71B7]\n\tBaseThreadInitThunk [0x75C30099+25]\n\tRtlGetAppContainerNamedObjectPath [0x77657B6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77657B3E+238]\n\nScreenshot: file://C:\\Users\\Stanislav\\.selene\\screenshots\\1681762146812\\1681762146813.png\nPageSource: file://C:\\Users\\Stanislav\\.selene\\screenshots\\1681762146812\\1681762146813.html", "trace": "fn = <selene.core.wait.Command object at 0x0000023979792C70>\n\n    @self._decorator(self)\n    def _(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\nC:\\Users\\Stanislav\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python38\\site-packages\\selene\\core\\wait.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.wait.Command object at 0x0000023979792C70>\nentity = <selene.core.entity.Element object at 0x00000239797926D0>\n\n    def __call__(self, entity: T) -> R:\n>       return self._fn(entity)\n\nC:\\Users\\Stanislav\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python38\\site-packages\\selene\\core\\wait.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nelement = <selene.core.entity.Element object at 0x00000239797926D0>\n\n>       'send keys', lambda element: element().send_keys(*value)\n    )\n\nC:\\Users\\Stanislav\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python38\\site-packages\\selene\\core\\entity.py:467: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"dfc48c00fd5d5cfc170011de3f7485ff\", element=\"db6c2125-af55-4a5e-9814-c65d0e206df2\")>\nvalue = ('D:\\\\PycharmProjects\\\\-qa_guru_4_11/photo_test.jpg',)\n\n    def send_keys(self, *value) -> None:\n        \"\"\"Simulates typing into the element.\n    \n        :Args:\n            - value - A string for typing, or setting form fields.  For setting\n              file inputs, this could be a local file path.\n    \n        Use this to send simple key events or to fill out form fields::\n    \n            form_textfield = driver.find_element(By.NAME, 'username')\n            form_textfield.send_keys(\"admin\")\n    \n        This can also be used to set file inputs.\n    \n        ::\n    \n            file_input = driver.find_element(By.NAME, 'profilePic')\n            file_input.send_keys(\"path/to/profilepic.gif\")\n            # Generally it's better to wrap the file path in one of the methods\n            # in os.path to return the actual path to support cross OS testing.\n            # file_input.send_keys(os.path.abspath(\"path/to/profilepic.gif\"))\n        \"\"\"\n        # transfer file to another machine only if remote driver is used\n        # the same behaviour as for java binding\n        if self.parent._is_remote:\n            local_files = list(\n                map(\n                    lambda keys_to_send: self.parent.file_detector.is_local_file(str(keys_to_send)),\n                    \"\".join(map(str, value)).split(\"\\n\"),\n                )\n            )\n            if None not in local_files:\n                remote_files = []\n                for file in local_files:\n                    remote_files.append(self._upload(file))\n                value = \"\\n\".join(remote_files)\n    \n>       self._execute(\n            Command.SEND_KEYS_TO_ELEMENT, {\"text\": \"\".join(keys_to_typing(value)), \"value\": keys_to_typing(value)}\n        )\n\nC:\\Users\\Stanislav\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python38\\site-packages\\selenium\\webdriver\\remote\\webelement.py:230: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"dfc48c00fd5d5cfc170011de3f7485ff\", element=\"db6c2125-af55-4a5e-9814-c65d0e206df2\")>\ncommand = 'sendKeysToElement'\nparams = {'id': 'db6c2125-af55-4a5e-9814-c65d0e206df2', 'text': 'D:\\\\PycharmProjects\\\\-qa_guru_4_11/photo_test.jpg', 'value': ['D', ':', '\\\\', 'P', 'y', 'c', ...]}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\nC:\\Users\\Stanislav\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python38\\site-packages\\selenium\\webdriver\\remote\\webelement.py:403: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"dfc48c00fd5d5cfc170011de3f7485ff\")>\ndriver_command = 'sendKeysToElement'\nparams = {'id': 'db6c2125-af55-4a5e-9814-c65d0e206df2', 'text': 'D:\\\\PycharmProjects\\\\-qa_guru_4_11/photo_test.jpg', 'value': ['D', ':', '\\\\', 'P', 'y', 'c', ...]}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nC:\\Users\\Stanislav\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python38\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002397971D910>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : D:\\\\\\\\Pyc...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77657B6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77657B3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : D:\\PycharmProjects\\-qa_guru_4_11/photo_test.jpg\nE         (Session info: chrome=112.0.5615.86)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00A2DCE3+50899]\nE       \t(No symbol) [0x009BE111]\nE       \t(No symbol) [0x008C5588]\nE       \t(No symbol) [0x008EB7FF]\nE       \t(No symbol) [0x0090B8FC]\nE       \t(No symbol) [0x008E8EC6]\nE       \t(No symbol) [0x0090BC54]\nE       \t(No symbol) [0x0091E01C]\nE       \t(No symbol) [0x0090B6F6]\nE       \t(No symbol) [0x008E7708]\nE       \t(No symbol) [0x008E886D]\nE       \tGetHandleVerifier [0x00C93EAE+2566302]\nE       \tGetHandleVerifier [0x00CC92B1+2784417]\nE       \tGetHandleVerifier [0x00CC327C+2759788]\nE       \tGetHandleVerifier [0x00AC5740+672048]\nE       \t(No symbol) [0x009C8872]\nE       \t(No symbol) [0x009C41C8]\nE       \t(No symbol) [0x009C42AB]\nE       \t(No symbol) [0x009B71B7]\nE       \tBaseThreadInitThunk [0x75C30099+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77657B6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77657B3E+238]\n\nC:\\Users\\Stanislav\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python38\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: InvalidArgumentException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_page.TestPage object at 0x000002397971D4F0>\ndriver_browser = <function driver_browser at 0x0000023977F259D0>\n\n    def test_form(self, driver_browser):\n        user = FormRegistration(\n            first_name='Антон',\n            last_name='Антонов',\n            email='anton@anton.ru',\n            gender=\"Other\",\n            phone_number=7111111111,\n            birth_month=\"November\",\n            birth_year=\"2000\",\n            birth_day=\"20\",\n            interests=Hobbies.science.value,\n            hobby='Sports',\n            photo_path=\"photo_test.jpg\",\n            address='USA, 12723 street',\n            state='Rajasthan',\n            city='Jaiselmer'\n        )\n        registration = RegistrationPage()\n>       registration.registration_user(user)\n\ntests\\test_page.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\registration_page.py:93: in registration_user\n    self.set_photo(user.photo_path)\npages\\registration_page.py:65: in set_photo\n    self.photo.send_keys(os.getcwd() + \"/\" + photo)\nC:\\Users\\Stanislav\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python38\\site-packages\\selene\\core\\entity.py:466: in send_keys\n    self.wait.command(\nC:\\Users\\Stanislav\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python38\\site-packages\\selene\\core\\wait.py:158: in command\n    self.for_(Command(description, fn))\nC:\\Users\\Stanislav\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python38\\site-packages\\selene\\core\\wait.py:147: in for_\n    return _(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.wait.Command object at 0x0000023979792C70>\n\n    @self._decorator(self)\n    def _(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n    \n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # todo: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '#uploadPicture')).send keys\nE                   \nE                   Reason: InvalidArgumentException: Message: invalid argument: File not found : D:\\PycharmProjects\\-qa_guru_4_11/photo_test.jpg\nE                     (Session info: chrome=112.0.5615.86)\nE                   Stacktrace:\nE                   Backtrace:\nE                   \tGetHandleVerifier [0x00A2DCE3+50899]\nE                   \t(No symbol) [0x009BE111]\nE                   \t(No symbol) [0x008C5588]\nE                   \t(No symbol) [0x008EB7FF]\nE                   \t(No symbol) [0x0090B8FC]\nE                   \t(No symbol) [0x008E8EC6]\nE                   \t(No symbol) [0x0090BC54]\nE                   \t(No symbol) [0x0091E01C]\nE                   \t(No symbol) [0x0090B6F6]\nE                   \t(No symbol) [0x008E7708]\nE                   \t(No symbol) [0x008E886D]\nE                   \tGetHandleVerifier [0x00C93EAE+2566302]\nE                   \tGetHandleVerifier [0x00CC92B1+2784417]\nE                   \tGetHandleVerifier [0x00CC327C+2759788]\nE                   \tGetHandleVerifier [0x00AC5740+672048]\nE                   \t(No symbol) [0x009C8872]\nE                   \t(No symbol) [0x009C41C8]\nE                   \t(No symbol) [0x009C42AB]\nE                   \t(No symbol) [0x009B71B7]\nE                   \tBaseThreadInitThunk [0x75C30099+25]\nE                   \tRtlGetAppContainerNamedObjectPath [0x77657B6E+286]\nE                   \tRtlGetAppContainerNamedObjectPath [0x77657B3E+238]\nE                   \nE                   Screenshot: file://C:\\Users\\Stanislav\\.selene\\screenshots\\1681762146812\\1681762146813.png\nE                   PageSource: file://C:\\Users\\Stanislav\\.selene\\screenshots\\1681762146812\\1681762146813.html\n\nC:\\Users\\Stanislav\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python38\\site-packages\\selene\\core\\wait.py:145: TimeoutException"}, "start": 1681762193109, "stop": 1681762199071, "uuid": "fc551632-4e89-40ac-8f19-4e7d85203af9", "historyId": "b130b303c7d15ae89312636453e083e0", "testCaseId": "e78d10321f929be882746498227992cb", "fullName": "tests.test_page.TestPage#test_form", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_page"}, {"name": "subSuite", "value": "TestPage"}, {"name": "host", "value": "Stanislav-ПК"}, {"name": "thread", "value": "6328-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_page"}]}